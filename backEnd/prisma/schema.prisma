// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//enums
enum Department {
  generalMedication
  emergency
  administration
  lab
  cardiology
}

enum Role {
  physician
  nurse
  receptionist
}

enum Status {
  active
  inactive
}

enum Availability {
  full_time
  part_time
}

enum FeedbackStatus {
  reviewed
  pending
}

enum ReportStatus {
  approved
  pending
  denied 
}

enum Priority {
  normal
  high
  urgent
}

enum Refills {
  no_refills 
  one_refill
  two_refills
  three_refills
  four_refills
}



//models

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}


model Patients {
  id              String         @id @default(uuid())
  fName           String
  lName           String
  studentId       String         @unique
  password        String
  email           String         @unique
  lastVisit       DateTime? 
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt

  // Relationships
  appointments    Appointments[] // A patient can have multiple appointments
  prescriptions   Prescriptions[] // A patient can have multiple prescriptions
  feedbacks       Feedbacks[] // A patient can submit multiple feedbacks
}

model Appointments {
  id        String          @id @default(uuid())
  patientId String
  staffId   String
  reason    String?
  type      String
  date      String
  time      String
  note      String? 
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relationships
  patient   Patients @relation(fields: [patientId], references: [id])
  staff     Staff    @relation(fields: [staffId], references: [id])
}


model Prescriptions {
  id         String   @id @default(uuid())
  patientId  String
  staffId    String
  medication String
  detail     String
  duration   String
  refills    Refills
  frequency  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  patient    Patients @relation(fields: [patientId], references: [id])
  staff      Staff    @relation(fields: [staffId], references: [id])
}

model Staff {
  id           String        @id @default(uuid())
  fName        String
  lName        String
  email        String        @unique
  password     String
  department   Department
  role         Role
  status       Status        @default(inactive)
  availability Availability
  phoneNumber  Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // One-to-many relations
  appointments  Appointments[]
  prescriptions Prescriptions[]
  feedbacks     Feedbacks[]  
}

model Feedbacks {
  id        String          @id @default(uuid())
  patientId String
  staffId   String
  status    FeedbackStatus
  content   String
  rate      Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  patient   Patients        @relation(fields: [patientId], references: [id])
  staff     Staff           @relation(fields: [staffId], references: [id])
}




